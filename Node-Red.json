[
    {
        "id": "f2813c122f2b2cf1",
        "type": "tab",
        "label": "Calf Monitoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "mqtt_in",
        "type": "mqtt in",
        "z": "f2813c122f2b2cf1",
        "name": "Ruuvi MQTT Input",
        "topic": "ruuvi/#",
        "qos": "2",
        "datatype": "json",
        "broker": "mqtt_broker",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 100,
        "wires": [
            [
                "fd9f38d8d7415a26"
            ]
        ]
    },
    {
        "id": "tag_router",
        "type": "function",
        "z": "f2813c122f2b2cf1",
        "name": "Tag Router",
        "func": "// Map of MAC addresses and type\nconst MAC_MAP = {\n    'F9:13:35:E4:07:61': { role: 'fixed', pen: 1 },\n    'DD:EE:FF:01': { role: 'fixed', pen: 2 },\n    'F3:4E:CA:45:AC:90': { role: 'wearable', calf: 101, pen: 1 },\n    'C2:DA:91:51:25:F7': { role: 'wearable', calf: 102, pen: 1 }\n};\n\nconst mac = msg.topic.split('/')[1];\nmsg.mac = mac;\nmsg.payload.mac = mac;\n\nif (!MAC_MAP[mac]) return null;\nmsg.tagInfo = MAC_MAP[mac];\n\nif (MAC_MAP[mac].role === 'fixed') {\n    return [msg, null];\n} else {\n    return [null, msg];\n} ",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 260,
        "wires": [
            [
                "fixed_env_analysis"
            ],
            [
                "wearable_motion_analysis"
            ]
        ]
    },
    {
        "id": "fixed_env_analysis",
        "type": "function",
        "z": "f2813c122f2b2cf1",
        "name": "Fixed Tag Env Analysis",
        "func": "const { temperature, humidity, pressure } = msg.payload;\n\n// Dew point calc (simplified Magnus formula)\nconst b = 17.62;\nconst c = 243.12;\nconst gamma = (b * temperature) / (c + temperature) + Math.log(humidity / 100);\nconst dewPoint = (c * gamma) / (b - gamma);\n\nmsg.payload.dewPoint = dewPoint;\nmsg.payload.alert = (temperature < 10 && humidity > 85);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 260,
        "wires": [
            [
                "dashboard_env"
            ]
        ]
    },
    {
        "id": "wearable_motion_analysis",
        "type": "function",
        "z": "f2813c122f2b2cf1",
        "name": "Wearable Motion Analysis",
        "func": "const { accelerationX, accelerationY, accelerationZ } = msg.payload;\nconst activity = Math.sqrt(accelerationX ** 2 + accelerationY ** 2 + accelerationZ ** 2);\n\nconst magnitude = activity || 1;\nconst normZ = accelerationZ / magnitude;\n\nmsg.payload.activity = activity;\nmsg.payload.orientation = (Math.abs(normZ) < 0.4) ? 'standing' : 'lying';\n\n// Use a simple threshold for movement classification (can be improved with smoothing)\nif (activity > 1.4) {\n    msg.payload.motion = \"running\";\n} else if (activity > 1.05) {\n    msg.payload.motion = \"walking\";\n} else {\n    msg.payload.motion = \"still\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 320,
        "wires": [
            [
                "944697fa67404171"
            ]
        ]
    },
    {
        "id": "dashboard_env",
        "type": "ui_text",
        "z": "f2813c122f2b2cf1",
        "group": "ui_pen",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "Pen Env Status",
        "label": "Pen {{msg.tagInfo.pen}} Temp: {{payload.temperature}}°C, Hum: {{payload.humidity}}%",
        "format": "{{msg.payload.alert ? '⚠️ Risk' : 'OK'}}",
        "x": 830,
        "y": 260,
        "wires": []
    },
    {
        "id": "fd9f38d8d7415a26",
        "type": "function",
        "z": "f2813c122f2b2cf1",
        "name": "Ruuvi Hex conversion",
        "func": "let str = msg.payload.data;\nconst data = {};\n\n//type\nlet part1 = \"0x\" + str[14] + str[15];\ndata.type = parseInt(part1);\n\n//temperature\nlet part2 = \"0x\" + str[16] + str[17] + str[18] + str[19];\nlet temperature = parseInt(part2);\n  if (temperature > 32767) {\n    temperature -= 65534;\n  }\ndata.temperature = temperature * 0.005;\n\n//humidity\nlet part3 = \"0x\" + str[20] + str[21] + str[22] + str[23];\ndata.humidity = parseInt(part3) / 400.0;\n\n//pressure\nlet part4 = \"0x\" + str[24] + str[25] + str[26] + str[27];\ndata.pressure = parseInt(part4) + 50000;\n\n//accelerometer\n//X\nlet part5 = \"0x\" + str[28] + str[29] + str[30] + str[31];\nlet accelerationX = parseInt(part5);\nif (accelerationX > 32767) accelerationX -= 65536; // two's complement\ndata.accelerationX = accelerationX /1000;\n//Y\nlet part6 = \"0x\" + str[32] + str[33] + str[34] + str[35];\nlet accelerationY = parseInt(part6);\nif (accelerationY > 32767) accelerationY -= 65536;\ndata.accelerationY = accelerationY /1000;\n//Z\nlet part7 = \"0x\" + str[36] + str[37] + str[38] + str[39];\nlet accelerationZ = parseInt(part7);\nif (accelerationZ > 32767) accelerationZ -= 65536; // two's complement\ndata.accelerationZ = accelerationZ /1000\n\n//Power\nlet part8 = \"0x\" + str[40] + str[41] + str[42] + str[43];\nlet power = parseInt(part8).toString(2);\nlet voltage = power.substr(0, 11);\nlet TXdbm = power.slice(-5);\ndata.voltage = (parseInt(voltage, 2) + 1600) / 1000;\ndata.TXdbm = (parseInt(TXdbm, 2) & 0b11111) * 2 - 40;\n\n//movementCounter\nlet part9 = \"0x\" + str[44] + str[45];\ndata.movementCounter = parseInt(part9);\n\n//measurementSequenceNumber\nlet part10 = \"0x\" + str[46] + str[47] + str[48] + str[49];\ndata.measurementSequenceNumber = parseInt(part10);\n\n//mac\nlet part11 = str.slice(-12);\ndata.mac = part11;\n\ndata.rssi = msg.payload.rssi\n\nmsg.payload = data\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 180,
        "wires": [
            [
                "tag_router",
                "0b7c27b3e2fd5927"
            ]
        ]
    },
    {
        "id": "bc447f6eeebcc00c",
        "type": "inject",
        "z": "f2813c122f2b2cf1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ruuvi/F9:13:35:E4:07:61",
        "payload": "{\"type\":5,\"temperature\":9.615000000000002,\"humidity\":91.8075,\"pressure\":99082,\"accelerationX\":0.08,\"accelerationY\":0.004,\"accelerationZ\":-1.04,\"voltage\":2.971,\"TXdbm\":4,\"movementCounter\":54,\"measurementSequenceNumber\":20219,\"mac\":\"F9:13:35:E4:07:61\"}",
        "payloadType": "json",
        "x": 130,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "944697fa67404171",
        "type": "function",
        "z": "f2813c122f2b2cf1",
        "name": "Format Table Row",
        "func": "const log = flow.get('activityLog') || [];\n\nconst entry = {\n    timestamp: new Date().toLocaleTimeString(),\n    calf: msg.tagInfo.calf,\n    pen: msg.tagInfo.pen,\n    orientation: msg.payload.orientation,\n    activity: msg.payload.activity.toFixed(3),\n    rumination: msg.payload.rumination ? \"Yes\" : \"No\"\n};\n\n// Keep only the latest 100 entries\nlog.push(entry);\nif (log.length > 10) log.shift();\n\nflow.set('activityLog', log);\n\nmsg.payload = log;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 360,
        "wires": [
            [
                "093189fdc0f5ce87",
                "174fa9d4bd581322"
            ]
        ]
    },
    {
        "id": "0b7c27b3e2fd5927",
        "type": "function",
        "z": "f2813c122f2b2cf1",
        "name": "Tag Discovery",
        "func": "// Maintain a map of recently seen tags\nconst tagDiscovery = global.get('tagDiscovery') || {};\nconst now = Date.now();\n\nconst mac = msg.mac || msg.topic.split('/')[1];\nconst payload = msg.payload || {};\nconst activity = Math.sqrt(\n    (payload.accelerationX || 0) ** 2 +\n    (payload.accelerationY || 0) ** 2 +\n    (payload.accelerationZ || 0) ** 2\n);\n\ntagDiscovery[mac] = {\n    mac,\n    lastSeen: now,\n    activity: activity.toFixed(2),\n    temp: payload.temperature,\n    rssi: payload.rssi || null\n};\n\n// Clean out old entries (older than 5 minutes)\nfor (const m in tagDiscovery) {\n    if (now - tagDiscovery[m].lastSeen > 5 * 60 * 1000) {\n        delete tagDiscovery[m];\n    }\n}\n\nglobal.set('tagDiscovery', tagDiscovery);\nmsg.payload = Object.values(tagDiscovery);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 140,
        "wires": [
            [
                "f8bd5a4fafd979fe"
            ]
        ]
    },
    {
        "id": "f8bd5a4fafd979fe",
        "type": "ui_table",
        "z": "f2813c122f2b2cf1",
        "group": "ui_calf",
        "name": "All Tags",
        "order": 1,
        "width": "12",
        "height": "4",
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 740,
        "y": 140,
        "wires": []
    },
    {
        "id": "093189fdc0f5ce87",
        "type": "debug",
        "z": "f2813c122f2b2cf1",
        "name": "debug 45",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 360,
        "wires": []
    },
    {
        "id": "174fa9d4bd581322",
        "type": "ui_table",
        "z": "f2813c122f2b2cf1",
        "group": "ui_calf",
        "name": "",
        "order": 1,
        "width": "12",
        "height": "8",
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 630,
        "y": 440,
        "wires": []
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "Ruuvi MQTT Broker",
        "broker": "192.168.1.23",
        "port": "1883",
        "clientid": "ruuvi_node_red",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "15",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ui_pen",
        "type": "ui_group",
        "name": "Pen Environment",
        "tab": "ui_main",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "ui_calf",
        "type": "ui_group",
        "name": "Calf Activity",
        "tab": "ui_main",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ui_main",
        "type": "ui_tab",
        "name": "Calf Monitor",
        "icon": "dashboard",
        "order": 1
    }
]
